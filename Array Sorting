//Dylan Mendoza 2/23/23
import java.util.Random;

public class Sorting {

    public static void main(String[] args) {
        int[] a = createRandomArray(100);
        int[] b = createRandomArray(1000);
        int[] c = createRandomArray(10000);
        int[] d = createRandomArray(100000);
        int[] e = createRandomArray(1000000);

        measureSortingTime(a, "Insertion Sort");
        measureSortingTime(a, "Selection Sort");
        measureSortingTime(a, "Merge Sort");
        measureSortingTime(a, "Quick Sort");

        measureSortingTime(b, "Insertion Sort");
        measureSortingTime(b, "Selection Sort");
        measureSortingTime(b, "Merge Sort");
        measureSortingTime(b, "Quick Sort");

        measureSortingTime(c, "Insertion Sort");
        measureSortingTime(c, "Selection Sort");
        measureSortingTime(c, "Merge Sort");
        measureSortingTime(c, "Quick Sort");

        measureSortingTime(d, "Insertion Sort");
        measureSortingTime(d, "Selection Sort");
        measureSortingTime(d, "Merge Sort");
        measureSortingTime(d, "Quick Sort");

        measureSortingTime(e, "Insertion Sort");
        measureSortingTime(e, "Selection Sort");
        measureSortingTime(e, "Merge Sort");
        measureSortingTime(e, "Quick Sort");
    }

    public static int[] createRandomArray(int length) {
        int[] arr = new int[length];
        Random random = new Random();
        for (int i = 0; i < length; i++) {
            arr[i] = random.nextInt();
        }
        return arr;
    }

    public static void randomizeArray(int[] arr) {
        Random random = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            int temp = arr[index];
            arr[index] = arr[i];
            arr[i] = temp;
        }
    }

    public static long measureSortingTime(int[] arr, String sortAlgorithm) {
        randomizeArray(arr);
        long startTime = System.nanoTime();
        switch (sortAlgorithm) {
            case "Insertion Sort":
                insertionSort(arr);
                break;
            case "Selection Sort":
                selectionSort(arr);
                break;
            case "Merge Sort":
                mergeSort(arr, 0, arr.length - 1);
                break;
            case "Quick Sort":
                quickSort(arr, 0, arr.length - 1);
                break;
            default:
                throw new IllegalArgumentException("Invalid sorting algorithm: " + sortAlgorithm);
        }
        long endTime = System.nanoTime();
        long duration = (endTime - startTime) / 1000l;
        System.out.println(sortAlgorithm + " took " + duration + " microseconds to sort an array of length " + arr.length);
        return duration;
    }

    public static void insertionSort(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
    }

    public static void selectionSort(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < arr.length; j++) {
            	if (arr[j] < arr[minIndex]) {
            		minIndex = j;
            		}
            	}
         	int temp = arr[i];
            	arr[i] = arr[minIndex];
            		arr[minIndex] = temp;
            	}
            }
    public static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int middle = (left + right) / 2;
            mergeSort(arr, left, middle);
            mergeSort(arr, middle + 1, right);
            merge(arr, left, middle, right);
        }
    }

    public static void merge(int[] arr, int left, int middle, int right) {
        int[] tempArr = new int[arr.length];
        for (int i = left; i <= right; i++) {
            tempArr[i] = arr[i];
        }
        int i = left;
        int j = middle + 1;
        int k = left;
        while (i <= middle && j <= right) {
            if (tempArr[i] <= tempArr[j]) {
                arr[k] = tempArr[i];
                i++;
            } else {
                arr[k] = tempArr[j];
                j++;
            }
            k++;
        }
        while (i <= middle) {
            arr[k] = tempArr[i];
            i++;
            k++;
        }
    }

    public static void quickSort(int[] arr, int left, int right) {
        if (left < right) {
            int partitionIndex = partition(arr, left, right);
            quickSort(arr, left, partitionIndex - 1);
            quickSort(arr, partitionIndex + 1, right);
        }
    }

    public static int partition(int[] arr, int left, int right) {
        int pivot = arr[right];
        int i = left - 1;
        for (int j = left; j < right; j++) {
            if (arr[j] <= pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i + 1];
        arr[i + 1] = arr[right];
        arr[right] = temp;
        return i + 1;
    }
}
